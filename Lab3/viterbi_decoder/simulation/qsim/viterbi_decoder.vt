// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/06/2018 03:06:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test_block
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_block_vlg_sample_tst(
	CLK,
	code_in,
	sampler_tx
);
input  CLK;
input [7:0] code_in;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or code_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_block_vlg_check_tst (
	code_out,
	r1,
	r2,
	r3,
	r4,
	r5,
	r6,
	r7,
	r8,
	shortest_path,
	sampler_rx
);
input [7:0] code_out;
input [7:0] r1;
input [7:0] r2;
input [7:0] r3;
input [7:0] r4;
input [7:0] r5;
input [7:0] r6;
input [7:0] r7;
input [7:0] r8;
input [7:0] shortest_path;
input sampler_rx;

reg [7:0] code_out_expected;
reg [7:0] r1_expected;
reg [7:0] r2_expected;
reg [7:0] r3_expected;
reg [7:0] r4_expected;
reg [7:0] r5_expected;
reg [7:0] r6_expected;
reg [7:0] r7_expected;
reg [7:0] r8_expected;
reg [7:0] shortest_path_expected;

reg [7:0] code_out_prev;
reg [7:0] r1_prev;
reg [7:0] r2_prev;
reg [7:0] r3_prev;
reg [7:0] r4_prev;
reg [7:0] r5_prev;
reg [7:0] r6_prev;
reg [7:0] r7_prev;
reg [7:0] r8_prev;
reg [7:0] shortest_path_prev;

reg [7:0] code_out_expected_prev;
reg [7:0] r1_expected_prev;
reg [7:0] r2_expected_prev;
reg [7:0] r3_expected_prev;
reg [7:0] r4_expected_prev;
reg [7:0] r5_expected_prev;
reg [7:0] r6_expected_prev;
reg [7:0] r7_expected_prev;
reg [7:0] r8_expected_prev;
reg [7:0] shortest_path_expected_prev;

reg [7:0] last_code_out_exp;
reg [7:0] last_r1_exp;
reg [7:0] last_r2_exp;
reg [7:0] last_r3_exp;
reg [7:0] last_r4_exp;
reg [7:0] last_r5_exp;
reg [7:0] last_r6_exp;
reg [7:0] last_r7_exp;
reg [7:0] last_r8_exp;
reg [7:0] last_shortest_path_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	code_out_prev = code_out;
	r1_prev = r1;
	r2_prev = r2;
	r3_prev = r3;
	r4_prev = r4;
	r5_prev = r5;
	r6_prev = r6;
	r7_prev = r7;
	r8_prev = r8;
	shortest_path_prev = shortest_path;
end

// update expected /o prevs

always @(trigger)
begin
	code_out_expected_prev = code_out_expected;
	r1_expected_prev = r1_expected;
	r2_expected_prev = r2_expected;
	r3_expected_prev = r3_expected;
	r4_expected_prev = r4_expected;
	r5_expected_prev = r5_expected;
	r6_expected_prev = r6_expected;
	r7_expected_prev = r7_expected;
	r8_expected_prev = r8_expected;
	shortest_path_expected_prev = shortest_path_expected;
end


// expected code_out[ 7 ]
initial
begin
	code_out_expected[7] = 1'bX;
end 
// expected code_out[ 6 ]
initial
begin
	code_out_expected[6] = 1'bX;
end 
// expected code_out[ 5 ]
initial
begin
	code_out_expected[5] = 1'bX;
end 
// expected code_out[ 4 ]
initial
begin
	code_out_expected[4] = 1'bX;
end 
// expected code_out[ 3 ]
initial
begin
	code_out_expected[3] = 1'bX;
end 
// expected code_out[ 2 ]
initial
begin
	code_out_expected[2] = 1'bX;
end 
// expected code_out[ 1 ]
initial
begin
	code_out_expected[1] = 1'bX;
end 
// expected code_out[ 0 ]
initial
begin
	code_out_expected[0] = 1'bX;
end 
// expected r1[ 7 ]
initial
begin
	r1_expected[7] = 1'b0;
end 
// expected r1[ 6 ]
initial
begin
	r1_expected[6] = 1'b0;
end 
// expected r1[ 5 ]
initial
begin
	r1_expected[5] = 1'b0;
end 
// expected r1[ 4 ]
initial
begin
	r1_expected[4] = 1'b1;
end 
// expected r1[ 3 ]
initial
begin
	r1_expected[3] = 1'b0;
end 
// expected r1[ 2 ]
initial
begin
	r1_expected[2] = 1'b0;
end 
// expected r1[ 1 ]
initial
begin
	r1_expected[1] = 1'b0;
end 
// expected r1[ 0 ]
initial
begin
	r1_expected[0] = 1'b0;
end 
// expected r2[ 7 ]
initial
begin
	r2_expected[7] = 1'b1;
end 
// expected r2[ 6 ]
initial
begin
	r2_expected[6] = 1'b0;
end 
// expected r2[ 5 ]
initial
begin
	r2_expected[5] = 1'b0;
end 
// expected r2[ 4 ]
initial
begin
	r2_expected[4] = 1'b1;
end 
// expected r2[ 3 ]
initial
begin
	r2_expected[3] = 1'b0;
end 
// expected r2[ 2 ]
initial
begin
	r2_expected[2] = 1'b0;
end 
// expected r2[ 1 ]
initial
begin
	r2_expected[1] = 1'b0;
end 
// expected r2[ 0 ]
initial
begin
	r2_expected[0] = 1'b0;
end 
// expected r3[ 7 ]
initial
begin
	r3_expected[7] = 1'b1;
end 
// expected r3[ 6 ]
initial
begin
	r3_expected[6] = 1'b0;
end 
// expected r3[ 5 ]
initial
begin
	r3_expected[5] = 1'b0;
end 
// expected r3[ 4 ]
initial
begin
	r3_expected[4] = 1'b1;
end 
// expected r3[ 3 ]
initial
begin
	r3_expected[3] = 1'b0;
end 
// expected r3[ 2 ]
initial
begin
	r3_expected[2] = 1'b0;
end 
// expected r3[ 1 ]
initial
begin
	r3_expected[1] = 1'b0;
end 
// expected r3[ 0 ]
initial
begin
	r3_expected[0] = 1'b0;
end 
// expected r4[ 7 ]
initial
begin
	r4_expected[7] = 1'b0;
end 
// expected r4[ 6 ]
initial
begin
	r4_expected[6] = 1'b0;
end 
// expected r4[ 5 ]
initial
begin
	r4_expected[5] = 1'b0;
end 
// expected r4[ 4 ]
initial
begin
	r4_expected[4] = 1'b1;
end 
// expected r4[ 3 ]
initial
begin
	r4_expected[3] = 1'b0;
end 
// expected r4[ 2 ]
initial
begin
	r4_expected[2] = 1'b0;
end 
// expected r4[ 1 ]
initial
begin
	r4_expected[1] = 1'b0;
end 
// expected r4[ 0 ]
initial
begin
	r4_expected[0] = 1'b0;
end 
// expected r5[ 7 ]
initial
begin
	r5_expected[7] = 1'b0;
end 
// expected r5[ 6 ]
initial
begin
	r5_expected[6] = 1'b0;
end 
// expected r5[ 5 ]
initial
begin
	r5_expected[5] = 1'b0;
end 
// expected r5[ 4 ]
initial
begin
	r5_expected[4] = 1'b1;
end 
// expected r5[ 3 ]
initial
begin
	r5_expected[3] = 1'b0;
end 
// expected r5[ 2 ]
initial
begin
	r5_expected[2] = 1'b0;
end 
// expected r5[ 1 ]
initial
begin
	r5_expected[1] = 1'b0;
end 
// expected r5[ 0 ]
initial
begin
	r5_expected[0] = 1'b0;
end 
// expected r6[ 7 ]
initial
begin
	r6_expected[7] = 1'b0;
end 
// expected r6[ 6 ]
initial
begin
	r6_expected[6] = 1'b0;
end 
// expected r6[ 5 ]
initial
begin
	r6_expected[5] = 1'b0;
end 
// expected r6[ 4 ]
initial
begin
	r6_expected[4] = 1'b1;
end 
// expected r6[ 3 ]
initial
begin
	r6_expected[3] = 1'b0;
end 
// expected r6[ 2 ]
initial
begin
	r6_expected[2] = 1'b0;
end 
// expected r6[ 1 ]
initial
begin
	r6_expected[1] = 1'b0;
end 
// expected r6[ 0 ]
initial
begin
	r6_expected[0] = 1'b0;
end 
// expected r7[ 7 ]
initial
begin
	r7_expected[7] = 1'b1;
end 
// expected r7[ 6 ]
initial
begin
	r7_expected[6] = 1'b0;
end 
// expected r7[ 5 ]
initial
begin
	r7_expected[5] = 1'b0;
end 
// expected r7[ 4 ]
initial
begin
	r7_expected[4] = 1'b1;
end 
// expected r7[ 3 ]
initial
begin
	r7_expected[3] = 1'b0;
end 
// expected r7[ 2 ]
initial
begin
	r7_expected[2] = 1'b0;
end 
// expected r7[ 1 ]
initial
begin
	r7_expected[1] = 1'b0;
end 
// expected r7[ 0 ]
initial
begin
	r7_expected[0] = 1'b0;
end 
// expected r8[ 7 ]
initial
begin
	r8_expected[7] = 1'b1;
end 
// expected r8[ 6 ]
initial
begin
	r8_expected[6] = 1'b0;
end 
// expected r8[ 5 ]
initial
begin
	r8_expected[5] = 1'b0;
end 
// expected r8[ 4 ]
initial
begin
	r8_expected[4] = 1'b1;
end 
// expected r8[ 3 ]
initial
begin
	r8_expected[3] = 1'b0;
end 
// expected r8[ 2 ]
initial
begin
	r8_expected[2] = 1'b0;
end 
// expected r8[ 1 ]
initial
begin
	r8_expected[1] = 1'b0;
end 
// expected r8[ 0 ]
initial
begin
	r8_expected[0] = 1'b0;
end 
// expected shortest_path[ 7 ]
initial
begin
	shortest_path_expected[7] = 1'bX;
end 
// expected shortest_path[ 6 ]
initial
begin
	shortest_path_expected[6] = 1'bX;
end 
// expected shortest_path[ 5 ]
initial
begin
	shortest_path_expected[5] = 1'bX;
end 
// expected shortest_path[ 4 ]
initial
begin
	shortest_path_expected[4] = 1'bX;
end 
// expected shortest_path[ 3 ]
initial
begin
	shortest_path_expected[3] = 1'bX;
end 
// expected shortest_path[ 2 ]
initial
begin
	shortest_path_expected[2] = 1'bX;
end 
// expected shortest_path[ 1 ]
initial
begin
	shortest_path_expected[1] = 1'bX;
end 
// expected shortest_path[ 0 ]
initial
begin
	shortest_path_expected[0] = 1'bX;
end 
// generate trigger
always @(code_out_expected or code_out or r1_expected or r1 or r2_expected or r2 or r3_expected or r3 or r4_expected or r4 or r5_expected or r5 or r6_expected or r6 or r7_expected or r7 or r8_expected or r8 or shortest_path_expected or shortest_path)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected code_out = %b | expected r1 = %b | expected r2 = %b | expected r3 = %b | expected r4 = %b | expected r5 = %b | expected r6 = %b | expected r7 = %b | expected r8 = %b | expected shortest_path = %b | ",code_out_expected_prev,r1_expected_prev,r2_expected_prev,r3_expected_prev,r4_expected_prev,r5_expected_prev,r6_expected_prev,r7_expected_prev,r8_expected_prev,shortest_path_expected_prev);
	$display("| real code_out = %b | real r1 = %b | real r2 = %b | real r3 = %b | real r4 = %b | real r5 = %b | real r6 = %b | real r7 = %b | real r8 = %b | real shortest_path = %b | ",code_out_prev,r1_prev,r2_prev,r3_prev,r4_prev,r5_prev,r6_prev,r7_prev,r8_prev,shortest_path_prev);
`endif
	if (
		( code_out_expected_prev[0] !== 1'bx ) && ( code_out_prev[0] !== code_out_expected_prev[0] )
		&& ((code_out_expected_prev[0] !== last_code_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_out_expected_prev);
		$display ("     Real value = %b", code_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_out_exp[0] = code_out_expected_prev[0];
	end
	if (
		( code_out_expected_prev[1] !== 1'bx ) && ( code_out_prev[1] !== code_out_expected_prev[1] )
		&& ((code_out_expected_prev[1] !== last_code_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_out_expected_prev);
		$display ("     Real value = %b", code_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_out_exp[1] = code_out_expected_prev[1];
	end
	if (
		( code_out_expected_prev[2] !== 1'bx ) && ( code_out_prev[2] !== code_out_expected_prev[2] )
		&& ((code_out_expected_prev[2] !== last_code_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_out_expected_prev);
		$display ("     Real value = %b", code_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_out_exp[2] = code_out_expected_prev[2];
	end
	if (
		( code_out_expected_prev[3] !== 1'bx ) && ( code_out_prev[3] !== code_out_expected_prev[3] )
		&& ((code_out_expected_prev[3] !== last_code_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_out_expected_prev);
		$display ("     Real value = %b", code_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_out_exp[3] = code_out_expected_prev[3];
	end
	if (
		( code_out_expected_prev[4] !== 1'bx ) && ( code_out_prev[4] !== code_out_expected_prev[4] )
		&& ((code_out_expected_prev[4] !== last_code_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_out_expected_prev);
		$display ("     Real value = %b", code_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_out_exp[4] = code_out_expected_prev[4];
	end
	if (
		( code_out_expected_prev[5] !== 1'bx ) && ( code_out_prev[5] !== code_out_expected_prev[5] )
		&& ((code_out_expected_prev[5] !== last_code_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_out_expected_prev);
		$display ("     Real value = %b", code_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_out_exp[5] = code_out_expected_prev[5];
	end
	if (
		( code_out_expected_prev[6] !== 1'bx ) && ( code_out_prev[6] !== code_out_expected_prev[6] )
		&& ((code_out_expected_prev[6] !== last_code_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_out_expected_prev);
		$display ("     Real value = %b", code_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_out_exp[6] = code_out_expected_prev[6];
	end
	if (
		( code_out_expected_prev[7] !== 1'bx ) && ( code_out_prev[7] !== code_out_expected_prev[7] )
		&& ((code_out_expected_prev[7] !== last_code_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port code_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", code_out_expected_prev);
		$display ("     Real value = %b", code_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_code_out_exp[7] = code_out_expected_prev[7];
	end
	if (
		( r1_expected_prev[0] !== 1'bx ) && ( r1_prev[0] !== r1_expected_prev[0] )
		&& ((r1_expected_prev[0] !== last_r1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r1_exp[0] = r1_expected_prev[0];
	end
	if (
		( r1_expected_prev[1] !== 1'bx ) && ( r1_prev[1] !== r1_expected_prev[1] )
		&& ((r1_expected_prev[1] !== last_r1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r1_exp[1] = r1_expected_prev[1];
	end
	if (
		( r1_expected_prev[2] !== 1'bx ) && ( r1_prev[2] !== r1_expected_prev[2] )
		&& ((r1_expected_prev[2] !== last_r1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r1_exp[2] = r1_expected_prev[2];
	end
	if (
		( r1_expected_prev[3] !== 1'bx ) && ( r1_prev[3] !== r1_expected_prev[3] )
		&& ((r1_expected_prev[3] !== last_r1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r1_exp[3] = r1_expected_prev[3];
	end
	if (
		( r1_expected_prev[4] !== 1'bx ) && ( r1_prev[4] !== r1_expected_prev[4] )
		&& ((r1_expected_prev[4] !== last_r1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r1_exp[4] = r1_expected_prev[4];
	end
	if (
		( r1_expected_prev[5] !== 1'bx ) && ( r1_prev[5] !== r1_expected_prev[5] )
		&& ((r1_expected_prev[5] !== last_r1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r1_exp[5] = r1_expected_prev[5];
	end
	if (
		( r1_expected_prev[6] !== 1'bx ) && ( r1_prev[6] !== r1_expected_prev[6] )
		&& ((r1_expected_prev[6] !== last_r1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r1_exp[6] = r1_expected_prev[6];
	end
	if (
		( r1_expected_prev[7] !== 1'bx ) && ( r1_prev[7] !== r1_expected_prev[7] )
		&& ((r1_expected_prev[7] !== last_r1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r1_exp[7] = r1_expected_prev[7];
	end
	if (
		( r2_expected_prev[0] !== 1'bx ) && ( r2_prev[0] !== r2_expected_prev[0] )
		&& ((r2_expected_prev[0] !== last_r2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r2_exp[0] = r2_expected_prev[0];
	end
	if (
		( r2_expected_prev[1] !== 1'bx ) && ( r2_prev[1] !== r2_expected_prev[1] )
		&& ((r2_expected_prev[1] !== last_r2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r2_exp[1] = r2_expected_prev[1];
	end
	if (
		( r2_expected_prev[2] !== 1'bx ) && ( r2_prev[2] !== r2_expected_prev[2] )
		&& ((r2_expected_prev[2] !== last_r2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r2_exp[2] = r2_expected_prev[2];
	end
	if (
		( r2_expected_prev[3] !== 1'bx ) && ( r2_prev[3] !== r2_expected_prev[3] )
		&& ((r2_expected_prev[3] !== last_r2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r2_exp[3] = r2_expected_prev[3];
	end
	if (
		( r2_expected_prev[4] !== 1'bx ) && ( r2_prev[4] !== r2_expected_prev[4] )
		&& ((r2_expected_prev[4] !== last_r2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r2_exp[4] = r2_expected_prev[4];
	end
	if (
		( r2_expected_prev[5] !== 1'bx ) && ( r2_prev[5] !== r2_expected_prev[5] )
		&& ((r2_expected_prev[5] !== last_r2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r2_exp[5] = r2_expected_prev[5];
	end
	if (
		( r2_expected_prev[6] !== 1'bx ) && ( r2_prev[6] !== r2_expected_prev[6] )
		&& ((r2_expected_prev[6] !== last_r2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r2_exp[6] = r2_expected_prev[6];
	end
	if (
		( r2_expected_prev[7] !== 1'bx ) && ( r2_prev[7] !== r2_expected_prev[7] )
		&& ((r2_expected_prev[7] !== last_r2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r2_exp[7] = r2_expected_prev[7];
	end
	if (
		( r3_expected_prev[0] !== 1'bx ) && ( r3_prev[0] !== r3_expected_prev[0] )
		&& ((r3_expected_prev[0] !== last_r3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r3_exp[0] = r3_expected_prev[0];
	end
	if (
		( r3_expected_prev[1] !== 1'bx ) && ( r3_prev[1] !== r3_expected_prev[1] )
		&& ((r3_expected_prev[1] !== last_r3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r3_exp[1] = r3_expected_prev[1];
	end
	if (
		( r3_expected_prev[2] !== 1'bx ) && ( r3_prev[2] !== r3_expected_prev[2] )
		&& ((r3_expected_prev[2] !== last_r3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r3_exp[2] = r3_expected_prev[2];
	end
	if (
		( r3_expected_prev[3] !== 1'bx ) && ( r3_prev[3] !== r3_expected_prev[3] )
		&& ((r3_expected_prev[3] !== last_r3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r3_exp[3] = r3_expected_prev[3];
	end
	if (
		( r3_expected_prev[4] !== 1'bx ) && ( r3_prev[4] !== r3_expected_prev[4] )
		&& ((r3_expected_prev[4] !== last_r3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r3_exp[4] = r3_expected_prev[4];
	end
	if (
		( r3_expected_prev[5] !== 1'bx ) && ( r3_prev[5] !== r3_expected_prev[5] )
		&& ((r3_expected_prev[5] !== last_r3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r3_exp[5] = r3_expected_prev[5];
	end
	if (
		( r3_expected_prev[6] !== 1'bx ) && ( r3_prev[6] !== r3_expected_prev[6] )
		&& ((r3_expected_prev[6] !== last_r3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r3_exp[6] = r3_expected_prev[6];
	end
	if (
		( r3_expected_prev[7] !== 1'bx ) && ( r3_prev[7] !== r3_expected_prev[7] )
		&& ((r3_expected_prev[7] !== last_r3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r3_exp[7] = r3_expected_prev[7];
	end
	if (
		( r4_expected_prev[0] !== 1'bx ) && ( r4_prev[0] !== r4_expected_prev[0] )
		&& ((r4_expected_prev[0] !== last_r4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r4_exp[0] = r4_expected_prev[0];
	end
	if (
		( r4_expected_prev[1] !== 1'bx ) && ( r4_prev[1] !== r4_expected_prev[1] )
		&& ((r4_expected_prev[1] !== last_r4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r4_exp[1] = r4_expected_prev[1];
	end
	if (
		( r4_expected_prev[2] !== 1'bx ) && ( r4_prev[2] !== r4_expected_prev[2] )
		&& ((r4_expected_prev[2] !== last_r4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r4_exp[2] = r4_expected_prev[2];
	end
	if (
		( r4_expected_prev[3] !== 1'bx ) && ( r4_prev[3] !== r4_expected_prev[3] )
		&& ((r4_expected_prev[3] !== last_r4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r4_exp[3] = r4_expected_prev[3];
	end
	if (
		( r4_expected_prev[4] !== 1'bx ) && ( r4_prev[4] !== r4_expected_prev[4] )
		&& ((r4_expected_prev[4] !== last_r4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r4_exp[4] = r4_expected_prev[4];
	end
	if (
		( r4_expected_prev[5] !== 1'bx ) && ( r4_prev[5] !== r4_expected_prev[5] )
		&& ((r4_expected_prev[5] !== last_r4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r4_exp[5] = r4_expected_prev[5];
	end
	if (
		( r4_expected_prev[6] !== 1'bx ) && ( r4_prev[6] !== r4_expected_prev[6] )
		&& ((r4_expected_prev[6] !== last_r4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r4_exp[6] = r4_expected_prev[6];
	end
	if (
		( r4_expected_prev[7] !== 1'bx ) && ( r4_prev[7] !== r4_expected_prev[7] )
		&& ((r4_expected_prev[7] !== last_r4_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r4_exp[7] = r4_expected_prev[7];
	end
	if (
		( r5_expected_prev[0] !== 1'bx ) && ( r5_prev[0] !== r5_expected_prev[0] )
		&& ((r5_expected_prev[0] !== last_r5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r5_exp[0] = r5_expected_prev[0];
	end
	if (
		( r5_expected_prev[1] !== 1'bx ) && ( r5_prev[1] !== r5_expected_prev[1] )
		&& ((r5_expected_prev[1] !== last_r5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r5_exp[1] = r5_expected_prev[1];
	end
	if (
		( r5_expected_prev[2] !== 1'bx ) && ( r5_prev[2] !== r5_expected_prev[2] )
		&& ((r5_expected_prev[2] !== last_r5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r5_exp[2] = r5_expected_prev[2];
	end
	if (
		( r5_expected_prev[3] !== 1'bx ) && ( r5_prev[3] !== r5_expected_prev[3] )
		&& ((r5_expected_prev[3] !== last_r5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r5_exp[3] = r5_expected_prev[3];
	end
	if (
		( r5_expected_prev[4] !== 1'bx ) && ( r5_prev[4] !== r5_expected_prev[4] )
		&& ((r5_expected_prev[4] !== last_r5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r5_exp[4] = r5_expected_prev[4];
	end
	if (
		( r5_expected_prev[5] !== 1'bx ) && ( r5_prev[5] !== r5_expected_prev[5] )
		&& ((r5_expected_prev[5] !== last_r5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r5_exp[5] = r5_expected_prev[5];
	end
	if (
		( r5_expected_prev[6] !== 1'bx ) && ( r5_prev[6] !== r5_expected_prev[6] )
		&& ((r5_expected_prev[6] !== last_r5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r5_exp[6] = r5_expected_prev[6];
	end
	if (
		( r5_expected_prev[7] !== 1'bx ) && ( r5_prev[7] !== r5_expected_prev[7] )
		&& ((r5_expected_prev[7] !== last_r5_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r5_exp[7] = r5_expected_prev[7];
	end
	if (
		( r6_expected_prev[0] !== 1'bx ) && ( r6_prev[0] !== r6_expected_prev[0] )
		&& ((r6_expected_prev[0] !== last_r6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r6_expected_prev);
		$display ("     Real value = %b", r6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r6_exp[0] = r6_expected_prev[0];
	end
	if (
		( r6_expected_prev[1] !== 1'bx ) && ( r6_prev[1] !== r6_expected_prev[1] )
		&& ((r6_expected_prev[1] !== last_r6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r6_expected_prev);
		$display ("     Real value = %b", r6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r6_exp[1] = r6_expected_prev[1];
	end
	if (
		( r6_expected_prev[2] !== 1'bx ) && ( r6_prev[2] !== r6_expected_prev[2] )
		&& ((r6_expected_prev[2] !== last_r6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r6_expected_prev);
		$display ("     Real value = %b", r6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r6_exp[2] = r6_expected_prev[2];
	end
	if (
		( r6_expected_prev[3] !== 1'bx ) && ( r6_prev[3] !== r6_expected_prev[3] )
		&& ((r6_expected_prev[3] !== last_r6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r6_expected_prev);
		$display ("     Real value = %b", r6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r6_exp[3] = r6_expected_prev[3];
	end
	if (
		( r6_expected_prev[4] !== 1'bx ) && ( r6_prev[4] !== r6_expected_prev[4] )
		&& ((r6_expected_prev[4] !== last_r6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r6_expected_prev);
		$display ("     Real value = %b", r6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r6_exp[4] = r6_expected_prev[4];
	end
	if (
		( r6_expected_prev[5] !== 1'bx ) && ( r6_prev[5] !== r6_expected_prev[5] )
		&& ((r6_expected_prev[5] !== last_r6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r6_expected_prev);
		$display ("     Real value = %b", r6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r6_exp[5] = r6_expected_prev[5];
	end
	if (
		( r6_expected_prev[6] !== 1'bx ) && ( r6_prev[6] !== r6_expected_prev[6] )
		&& ((r6_expected_prev[6] !== last_r6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r6_expected_prev);
		$display ("     Real value = %b", r6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r6_exp[6] = r6_expected_prev[6];
	end
	if (
		( r6_expected_prev[7] !== 1'bx ) && ( r6_prev[7] !== r6_expected_prev[7] )
		&& ((r6_expected_prev[7] !== last_r6_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r6[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r6_expected_prev);
		$display ("     Real value = %b", r6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r6_exp[7] = r6_expected_prev[7];
	end
	if (
		( r7_expected_prev[0] !== 1'bx ) && ( r7_prev[0] !== r7_expected_prev[0] )
		&& ((r7_expected_prev[0] !== last_r7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r7_exp[0] = r7_expected_prev[0];
	end
	if (
		( r7_expected_prev[1] !== 1'bx ) && ( r7_prev[1] !== r7_expected_prev[1] )
		&& ((r7_expected_prev[1] !== last_r7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r7_exp[1] = r7_expected_prev[1];
	end
	if (
		( r7_expected_prev[2] !== 1'bx ) && ( r7_prev[2] !== r7_expected_prev[2] )
		&& ((r7_expected_prev[2] !== last_r7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r7_exp[2] = r7_expected_prev[2];
	end
	if (
		( r7_expected_prev[3] !== 1'bx ) && ( r7_prev[3] !== r7_expected_prev[3] )
		&& ((r7_expected_prev[3] !== last_r7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r7_exp[3] = r7_expected_prev[3];
	end
	if (
		( r7_expected_prev[4] !== 1'bx ) && ( r7_prev[4] !== r7_expected_prev[4] )
		&& ((r7_expected_prev[4] !== last_r7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r7_exp[4] = r7_expected_prev[4];
	end
	if (
		( r7_expected_prev[5] !== 1'bx ) && ( r7_prev[5] !== r7_expected_prev[5] )
		&& ((r7_expected_prev[5] !== last_r7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r7_exp[5] = r7_expected_prev[5];
	end
	if (
		( r7_expected_prev[6] !== 1'bx ) && ( r7_prev[6] !== r7_expected_prev[6] )
		&& ((r7_expected_prev[6] !== last_r7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r7_exp[6] = r7_expected_prev[6];
	end
	if (
		( r7_expected_prev[7] !== 1'bx ) && ( r7_prev[7] !== r7_expected_prev[7] )
		&& ((r7_expected_prev[7] !== last_r7_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r7_expected_prev);
		$display ("     Real value = %b", r7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r7_exp[7] = r7_expected_prev[7];
	end
	if (
		( r8_expected_prev[0] !== 1'bx ) && ( r8_prev[0] !== r8_expected_prev[0] )
		&& ((r8_expected_prev[0] !== last_r8_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r8_expected_prev);
		$display ("     Real value = %b", r8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r8_exp[0] = r8_expected_prev[0];
	end
	if (
		( r8_expected_prev[1] !== 1'bx ) && ( r8_prev[1] !== r8_expected_prev[1] )
		&& ((r8_expected_prev[1] !== last_r8_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r8_expected_prev);
		$display ("     Real value = %b", r8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r8_exp[1] = r8_expected_prev[1];
	end
	if (
		( r8_expected_prev[2] !== 1'bx ) && ( r8_prev[2] !== r8_expected_prev[2] )
		&& ((r8_expected_prev[2] !== last_r8_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r8_expected_prev);
		$display ("     Real value = %b", r8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r8_exp[2] = r8_expected_prev[2];
	end
	if (
		( r8_expected_prev[3] !== 1'bx ) && ( r8_prev[3] !== r8_expected_prev[3] )
		&& ((r8_expected_prev[3] !== last_r8_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r8_expected_prev);
		$display ("     Real value = %b", r8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r8_exp[3] = r8_expected_prev[3];
	end
	if (
		( r8_expected_prev[4] !== 1'bx ) && ( r8_prev[4] !== r8_expected_prev[4] )
		&& ((r8_expected_prev[4] !== last_r8_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r8[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r8_expected_prev);
		$display ("     Real value = %b", r8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r8_exp[4] = r8_expected_prev[4];
	end
	if (
		( r8_expected_prev[5] !== 1'bx ) && ( r8_prev[5] !== r8_expected_prev[5] )
		&& ((r8_expected_prev[5] !== last_r8_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r8[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r8_expected_prev);
		$display ("     Real value = %b", r8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r8_exp[5] = r8_expected_prev[5];
	end
	if (
		( r8_expected_prev[6] !== 1'bx ) && ( r8_prev[6] !== r8_expected_prev[6] )
		&& ((r8_expected_prev[6] !== last_r8_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r8[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r8_expected_prev);
		$display ("     Real value = %b", r8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r8_exp[6] = r8_expected_prev[6];
	end
	if (
		( r8_expected_prev[7] !== 1'bx ) && ( r8_prev[7] !== r8_expected_prev[7] )
		&& ((r8_expected_prev[7] !== last_r8_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r8[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r8_expected_prev);
		$display ("     Real value = %b", r8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_r8_exp[7] = r8_expected_prev[7];
	end
	if (
		( shortest_path_expected_prev[0] !== 1'bx ) && ( shortest_path_prev[0] !== shortest_path_expected_prev[0] )
		&& ((shortest_path_expected_prev[0] !== last_shortest_path_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shortest_path[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shortest_path_expected_prev);
		$display ("     Real value = %b", shortest_path_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_shortest_path_exp[0] = shortest_path_expected_prev[0];
	end
	if (
		( shortest_path_expected_prev[1] !== 1'bx ) && ( shortest_path_prev[1] !== shortest_path_expected_prev[1] )
		&& ((shortest_path_expected_prev[1] !== last_shortest_path_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shortest_path[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shortest_path_expected_prev);
		$display ("     Real value = %b", shortest_path_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_shortest_path_exp[1] = shortest_path_expected_prev[1];
	end
	if (
		( shortest_path_expected_prev[2] !== 1'bx ) && ( shortest_path_prev[2] !== shortest_path_expected_prev[2] )
		&& ((shortest_path_expected_prev[2] !== last_shortest_path_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shortest_path[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shortest_path_expected_prev);
		$display ("     Real value = %b", shortest_path_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_shortest_path_exp[2] = shortest_path_expected_prev[2];
	end
	if (
		( shortest_path_expected_prev[3] !== 1'bx ) && ( shortest_path_prev[3] !== shortest_path_expected_prev[3] )
		&& ((shortest_path_expected_prev[3] !== last_shortest_path_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shortest_path[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shortest_path_expected_prev);
		$display ("     Real value = %b", shortest_path_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_shortest_path_exp[3] = shortest_path_expected_prev[3];
	end
	if (
		( shortest_path_expected_prev[4] !== 1'bx ) && ( shortest_path_prev[4] !== shortest_path_expected_prev[4] )
		&& ((shortest_path_expected_prev[4] !== last_shortest_path_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shortest_path[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shortest_path_expected_prev);
		$display ("     Real value = %b", shortest_path_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_shortest_path_exp[4] = shortest_path_expected_prev[4];
	end
	if (
		( shortest_path_expected_prev[5] !== 1'bx ) && ( shortest_path_prev[5] !== shortest_path_expected_prev[5] )
		&& ((shortest_path_expected_prev[5] !== last_shortest_path_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shortest_path[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shortest_path_expected_prev);
		$display ("     Real value = %b", shortest_path_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_shortest_path_exp[5] = shortest_path_expected_prev[5];
	end
	if (
		( shortest_path_expected_prev[6] !== 1'bx ) && ( shortest_path_prev[6] !== shortest_path_expected_prev[6] )
		&& ((shortest_path_expected_prev[6] !== last_shortest_path_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shortest_path[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shortest_path_expected_prev);
		$display ("     Real value = %b", shortest_path_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_shortest_path_exp[6] = shortest_path_expected_prev[6];
	end
	if (
		( shortest_path_expected_prev[7] !== 1'bx ) && ( shortest_path_prev[7] !== shortest_path_expected_prev[7] )
		&& ((shortest_path_expected_prev[7] !== last_shortest_path_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port shortest_path[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", shortest_path_expected_prev);
		$display ("     Real value = %b", shortest_path_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_shortest_path_exp[7] = shortest_path_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_block_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] code_in;
// wires                                               
wire [7:0] code_out;
wire [7:0] r1;
wire [7:0] r2;
wire [7:0] r3;
wire [7:0] r4;
wire [7:0] r5;
wire [7:0] r6;
wire [7:0] r7;
wire [7:0] r8;
wire [7:0] shortest_path;

wire sampler;                             

// assign statements (if any)                          
test_block i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.code_in(code_in),
	.code_out(code_out),
	.r1(r1),
	.r2(r2),
	.r3(r3),
	.r4(r4),
	.r5(r5),
	.r6(r6),
	.r7(r7),
	.r8(r8),
	.shortest_path(shortest_path)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 
// code_in[ 7 ]
initial
begin
	code_in[7] = 1'b1;
end 
// code_in[ 6 ]
initial
begin
	code_in[6] = 1'b0;
end 
// code_in[ 5 ]
initial
begin
	code_in[5] = 1'b0;
end 
// code_in[ 4 ]
initial
begin
	code_in[4] = 1'b1;
end 
// code_in[ 3 ]
initial
begin
	code_in[3] = 1'b1;
end 
// code_in[ 2 ]
initial
begin
	code_in[2] = 1'b0;
end 
// code_in[ 1 ]
initial
begin
	code_in[1] = 1'b0;
end 
// code_in[ 0 ]
initial
begin
	code_in[0] = 1'b0;
end 

test_block_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.code_in(code_in),
	.sampler_tx(sampler)
);

test_block_vlg_check_tst tb_out(
	.code_out(code_out),
	.r1(r1),
	.r2(r2),
	.r3(r3),
	.r4(r4),
	.r5(r5),
	.r6(r6),
	.r7(r7),
	.r8(r8),
	.shortest_path(shortest_path),
	.sampler_rx(sampler)
);
endmodule

