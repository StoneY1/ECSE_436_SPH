vendor_name = ModelSim
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab2/lab2/lab2/uniformRV32.v
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab2/lab2/lab2/noise_generator.bdf
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/LUTable.v
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/noiseCorrupt.v
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/start_edge_metric.v
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/full_stage1_edge_top.v
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/full_stage2_edge_top.v
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/full_stage1_edge_bottom.v
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/full_stage2_edge_bottom.v
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/final_stage.v
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/Viterbi_decoder_block.bdf
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/test_block.bdf
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/Viterbi_test1_no_AWGN.vwf
source_file = 1, C:/Users/MS/Documents/McGill/2018_Winter/ECSE 436/SPH/Lab3/viterbi_decoder/db/viterbi_decoder.cbx.xml
design_name = test_block
instance = comp, \code_in[7]~I , code_in[7], test_block, 1
instance = comp, \code_in[6]~I , code_in[6], test_block, 1
instance = comp, \code_in[5]~I , code_in[5], test_block, 1
instance = comp, \code_in[4]~I , code_in[4], test_block, 1
instance = comp, \code_in[3]~I , code_in[3], test_block, 1
instance = comp, \code_in[2]~I , code_in[2], test_block, 1
instance = comp, \code_in[1]~I , code_in[1], test_block, 1
instance = comp, \code_in[0]~I , code_in[0], test_block, 1
instance = comp, \code_out[7]~I , code_out[7], test_block, 1
instance = comp, \code_out[6]~I , code_out[6], test_block, 1
instance = comp, \code_out[5]~I , code_out[5], test_block, 1
instance = comp, \code_out[4]~I , code_out[4], test_block, 1
instance = comp, \code_out[3]~I , code_out[3], test_block, 1
instance = comp, \code_out[2]~I , code_out[2], test_block, 1
instance = comp, \code_out[1]~I , code_out[1], test_block, 1
instance = comp, \code_out[0]~I , code_out[0], test_block, 1
instance = comp, \CLK~I , CLK, test_block, 1
instance = comp, \r1[7]~I , r1[7], test_block, 1
instance = comp, \r1[6]~I , r1[6], test_block, 1
instance = comp, \r1[5]~I , r1[5], test_block, 1
instance = comp, \r1[4]~I , r1[4], test_block, 1
instance = comp, \r1[3]~I , r1[3], test_block, 1
instance = comp, \r1[2]~I , r1[2], test_block, 1
instance = comp, \r1[1]~I , r1[1], test_block, 1
instance = comp, \r1[0]~I , r1[0], test_block, 1
instance = comp, \r2[7]~I , r2[7], test_block, 1
instance = comp, \r2[6]~I , r2[6], test_block, 1
instance = comp, \r2[5]~I , r2[5], test_block, 1
instance = comp, \r2[4]~I , r2[4], test_block, 1
instance = comp, \r2[3]~I , r2[3], test_block, 1
instance = comp, \r2[2]~I , r2[2], test_block, 1
instance = comp, \r2[1]~I , r2[1], test_block, 1
instance = comp, \r2[0]~I , r2[0], test_block, 1
instance = comp, \r3[7]~I , r3[7], test_block, 1
instance = comp, \r3[6]~I , r3[6], test_block, 1
instance = comp, \r3[5]~I , r3[5], test_block, 1
instance = comp, \r3[4]~I , r3[4], test_block, 1
instance = comp, \r3[3]~I , r3[3], test_block, 1
instance = comp, \r3[2]~I , r3[2], test_block, 1
instance = comp, \r3[1]~I , r3[1], test_block, 1
instance = comp, \r3[0]~I , r3[0], test_block, 1
instance = comp, \r4[7]~I , r4[7], test_block, 1
instance = comp, \r4[6]~I , r4[6], test_block, 1
instance = comp, \r4[5]~I , r4[5], test_block, 1
instance = comp, \r4[4]~I , r4[4], test_block, 1
instance = comp, \r4[3]~I , r4[3], test_block, 1
instance = comp, \r4[2]~I , r4[2], test_block, 1
instance = comp, \r4[1]~I , r4[1], test_block, 1
instance = comp, \r4[0]~I , r4[0], test_block, 1
instance = comp, \r5[7]~I , r5[7], test_block, 1
instance = comp, \r5[6]~I , r5[6], test_block, 1
instance = comp, \r5[5]~I , r5[5], test_block, 1
instance = comp, \r5[4]~I , r5[4], test_block, 1
instance = comp, \r5[3]~I , r5[3], test_block, 1
instance = comp, \r5[2]~I , r5[2], test_block, 1
instance = comp, \r5[1]~I , r5[1], test_block, 1
instance = comp, \r5[0]~I , r5[0], test_block, 1
instance = comp, \r6[7]~I , r6[7], test_block, 1
instance = comp, \r6[6]~I , r6[6], test_block, 1
instance = comp, \r6[5]~I , r6[5], test_block, 1
instance = comp, \r6[4]~I , r6[4], test_block, 1
instance = comp, \r6[3]~I , r6[3], test_block, 1
instance = comp, \r6[2]~I , r6[2], test_block, 1
instance = comp, \r6[1]~I , r6[1], test_block, 1
instance = comp, \r6[0]~I , r6[0], test_block, 1
instance = comp, \r7[7]~I , r7[7], test_block, 1
instance = comp, \r7[6]~I , r7[6], test_block, 1
instance = comp, \r7[5]~I , r7[5], test_block, 1
instance = comp, \r7[4]~I , r7[4], test_block, 1
instance = comp, \r7[3]~I , r7[3], test_block, 1
instance = comp, \r7[2]~I , r7[2], test_block, 1
instance = comp, \r7[1]~I , r7[1], test_block, 1
instance = comp, \r7[0]~I , r7[0], test_block, 1
instance = comp, \r8[7]~I , r8[7], test_block, 1
instance = comp, \r8[6]~I , r8[6], test_block, 1
instance = comp, \r8[5]~I , r8[5], test_block, 1
instance = comp, \r8[4]~I , r8[4], test_block, 1
instance = comp, \r8[3]~I , r8[3], test_block, 1
instance = comp, \r8[2]~I , r8[2], test_block, 1
instance = comp, \r8[1]~I , r8[1], test_block, 1
instance = comp, \r8[0]~I , r8[0], test_block, 1
instance = comp, \shortest_path[7]~I , shortest_path[7], test_block, 1
instance = comp, \shortest_path[6]~I , shortest_path[6], test_block, 1
instance = comp, \shortest_path[5]~I , shortest_path[5], test_block, 1
instance = comp, \shortest_path[4]~I , shortest_path[4], test_block, 1
instance = comp, \shortest_path[3]~I , shortest_path[3], test_block, 1
instance = comp, \shortest_path[2]~I , shortest_path[2], test_block, 1
instance = comp, \shortest_path[1]~I , shortest_path[1], test_block, 1
instance = comp, \shortest_path[0]~I , shortest_path[0], test_block, 1
